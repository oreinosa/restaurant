{"version":3,"sources":["webpack:///./src/app/admin/products/create/create.component.html","webpack:///./src/app/admin/products/create/create.component.scss","webpack:///./src/app/admin/products/create/create.component.ts","webpack:///./src/app/admin/products/delete/delete.component.html","webpack:///./src/app/admin/products/delete/delete.component.scss","webpack:///./src/app/admin/products/delete/delete.component.ts","webpack:///./src/app/admin/products/products-routing.module.ts","webpack:///./src/app/admin/products/products.component.html","webpack:///./src/app/admin/products/products.component.scss","webpack:///./src/app/admin/products/products.component.ts","webpack:///./src/app/admin/products/products.module.ts","webpack:///./src/app/admin/products/update/update.component.html","webpack:///./src/app/admin/products/update/update.component.scss","webpack:///./src/app/admin/products/update/update.component.ts"],"names":[],"mappings":"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","file":"products-products-module.js","sourcesContent":["module.exports = \"<form #f='ngForm' (ngSubmit)='onSubmit(f)'>\\r\\n  <mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        <h2>Agregar {{ service.className | lowercase }}</h2>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 col-sm-6 col-lg-4 offset-lg-1\\\">\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder='Nombre' [(ngModel)]='product.name' name='name' required [readonly]='f.submitted'>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder='Descripción' [(ngModel)]='product.description' name='description' [readonly]='f.submitted'>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"number\\\" placeholder='Precio' [(ngModel)]='product.price' name='price' required [readonly]='f.submitted'>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"number\\\" placeholder='Costo' [(ngModel)]='product.cost' name='cost' required [readonly]='f.submitted'>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field *ngIf='categories;else loadingCategories'>\\r\\n            <mat-select placeholder='Categoría' [(ngModel)]='product.category' name='category' required>\\r\\n              <mat-option *ngFor='let category of categories' [value]='category'>{{ category.name }}</mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n          <ng-template #loadingCategories>\\r\\n            <mat-spinner class=\\\"mx-auto col-12\\\"></mat-spinner>\\r\\n          </ng-template>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-sm-6 col-lg-6 offset-lg-1 text-center my-2\\\">\\r\\n          <app-upload></app-upload>\\r\\n          <input type=\\\"text\\\" placeholder='Image URL' [(ngModel)]='product.imageURL' name='imageURL' class='d-none'>\\r\\n        </div>\\r\\n      </div>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-button type='submit' [disabled]='f.invalid || f.submitted || !upload?.fileURL'>Agregar</button>\\r\\n      <button mat-button type='button' routerLink='../' [disabled]='f.submitted'>Cancelar</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n</form>\"","module.exports = \"\"","import { UploadComponent } from \"../../../upload/upload.component\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { CategoriesService } from \"../../categories/categories.service\";\r\nimport { ProductsService } from \"../products.service\";\r\nimport { NotificationsService } from \"../../../notifications/notifications.service\";\r\nimport { Product } from \"../../../shared/models/product\";\r\nimport { Category } from \"../../../shared/models/category\";\r\nimport { Create } from \"../../../shared/helpers/create\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\n\r\n@Component({\r\n  selector: \"app-create\",\r\n  templateUrl: \"./create.component.html\",\r\n  styleUrls: [\r\n    \"./create.component.scss\",\r\n    \"../../../shared/styles/crud-create.scss\"\r\n  ]\r\n})\r\nexport class CreateComponent extends Create<Product> implements OnInit {\r\n  @ViewChild(UploadComponent)\r\n  upload: UploadComponent;\r\n  product = new Product();\r\n  categories: Category[];\r\n  constructor(\r\n    public productsService: ProductsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute,\r\n    public notifications: NotificationsService,\r\n    private categoriesService: CategoriesService\r\n  ) {\r\n    super(productsService, notifications, router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.categoriesService\r\n      .all()\r\n      .pipe(\r\n        // tslint:disable-next-line:arrow-return-shorthand\r\n        map(categories =>\r\n          categories.map(category => {\r\n            return { name: category.name, _id: category._id } as Category;\r\n          })\r\n        )\r\n      )\r\n      .subscribe((categories: Category[]) => (this.categories = categories));\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    // console.log(form.value);\r\n    this.upload\r\n      .onSubmit(this.productsService.apiRoute)\r\n      .subscribe(\r\n        (imageURL: string) => {\r\n          // console.log(imageURL);\r\n          // this.product.imageURL = imageURL;\r\n          const imageCtrl = form.controls.imageURL;\r\n          imageCtrl.setValue(imageURL); // set imageURL input value to the resolt of the upload POST event\r\n          // form.setValue({ ...form.value, \"imageURL\": res.data });\r\n          // console.log(form.value);\r\n          super.onSubmit(form);\r\n        },\r\n        (error: HttpErrorResponse) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","module.exports = \"<mat-card *ngIf='service.className | lowercase as className'>\\r\\n  <mat-card-header>\\r\\n    <mat-card-title>\\r\\n      <h2>Eliminar {{ className }}</h2>\\r\\n    </mat-card-title>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n    <p>¿Seguro que quieres eliminar la {{ className }}\\r\\n      <b>{{ _id }}</b>?\\r\\n    </p>\\r\\n  </mat-card-content>\\r\\n  <mat-card-actions>\\r\\n    <button mat-button type='button' (click)='onSubmit()'>Eliminar</button>\\r\\n    <button mat-button type='button' routerLink='../../'>Cancelar</button>\\r\\n  </mat-card-actions>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { ProductsService } from \"../products.service\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { Component } from \"@angular/core\";\r\nimport { NotificationsService } from \"../../../notifications/notifications.service\";\r\nimport { Delete } from \"../../../shared/helpers/delete\";\r\nimport { Product } from \"../../../shared/models/product\";\r\n\r\n@Component({\r\n  selector: \"app-delete\",\r\n  templateUrl: \"./delete.component.html\",\r\n  styleUrls: [\r\n    \"./delete.component.scss\",\r\n    \"../../../shared/styles/crud-delete.scss\"\r\n  ]\r\n})\r\nexport class DeleteComponent extends Delete<Product> {\r\n  constructor(\r\n    public productsService: ProductsService,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super(productsService, notifications, router, route);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DeleteComponent } from './delete/delete.component';\r\nimport { UpdateComponent } from './update/update.component';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ProductsComponent } from './products.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: ProductsComponent, children: [\r\n      { path: 'agregar', component: CreateComponent },\r\n      { path: 'actualizar', component: UpdateComponent },\r\n      { path: 'actualizar/:_id', component: UpdateComponent },\r\n      { path: 'eliminar', component: DeleteComponent },\r\n      { path: 'eliminar/:_id', component: DeleteComponent },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProductsRoutingModule { }\r\n","module.exports = \"<div class=\\\"action-container\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n</div>\\r\\n<mat-card>\\r\\n  <mat-card-header>\\r\\n    <mat-card-title>\\r\\n      <h2>{{ service.collectionName }}</h2>\\r\\n    </mat-card-title>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n    <button mat-button type='button' routerLink='agregar'>Agregar {{ service.className | lowercase }}</button>\\r\\n    <div class=\\\"row mt-4 mb-2\\\">\\r\\n      <div class=\\\"col-12 col-sm-6\\\">\\r\\n        <h4>\\r\\n          <mat-form-field class='full-width'>\\r\\n            <mat-select placeholder='Filtrar por categoría' [formControl]='categoryCtrl'>\\r\\n              <mat-option value='all'>Todas</mat-option>\\r\\n              <mat-option *ngFor='let category of categories' [value]='category._id'> {{ category.name }}</mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n        </h4>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"table-container\\\">\\r\\n      <table mat-table matSort [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z0\\\">\\r\\n\\r\\n        <!-- ID Column -->\\r\\n        <ng-container matColumnDef=\\\"id\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> ID </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element._id}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Name Column -->\\r\\n        <ng-container matColumnDef=\\\"name\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Nombre </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Price Column -->\\r\\n        <ng-container matColumnDef=\\\"price\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Precio </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price | currency }} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Cost Column -->\\r\\n        <ng-container matColumnDef=\\\"cost\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Costo </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.cost | currency }} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Image Column -->\\r\\n        <ng-container matColumnDef=\\\"imageURL\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Imagen </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n            <img src=\\\"{{element.imageURL | showImage }}\\\" [alt]=\\\"element.name\\\" class=\\\"img-fluid\\\">\\r\\n          </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Category Column -->\\r\\n        <ng-container matColumnDef=\\\"category\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Categoría </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.category.name}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Actions Column -->\\r\\n        <ng-container matColumnDef=\\\"actions\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Acciones </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n            <button mat-button type='button' (click)='onAction(\\\"actualizar\\\",element)'>Actualizar</button>\\r\\n            <button mat-button type='button' (click)='onAction(\\\"eliminar\\\",element)'>Eliminar</button>\\r\\n          </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n      </table>\\r\\n    </div>\\r\\n    <ng-container *ngIf='!objects'>\\r\\n      <mat-spinner class=\\\"mx-auto col-12\\\"></mat-spinner>\\r\\n    </ng-container>\\r\\n    <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\r\\n  </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".mat-column-name {\\n  max-width: 250px; }\\n\\n.mat-column-imageURL {\\n  text-align: center;\\n  max-width: 150px; }\\n\\n.mat-column-imageURL .img-fluid {\\n    height: 200px; }\\n\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { List } from \"../../shared/helpers/list\";\r\nimport { Product } from \"../../shared/models/product\";\r\nimport { ProductsService } from \"./products.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { switchMap, takeUntil, tap, map, startWith } from \"rxjs/operators\";\r\nimport { CategoriesService } from \"../categories/categories.service\";\r\nimport { Category } from \"../../shared/models/category\";\r\nimport { FormControl } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"app-products\",\r\n  templateUrl: \"./products.component.html\",\r\n  styleUrls: [\"./products.component.scss\", \"../../shared/styles/crud-list.scss\"]\r\n})\r\nexport class ProductsComponent extends List<Product> implements OnInit {\r\n  categories: Category[];\r\n  categoryCtrl = new FormControl(\"all\");\r\n  constructor(\r\n    public service: ProductsService,\r\n    public router: Router,\r\n    private categoriesService: CategoriesService\r\n  ) {\r\n    super(service, router, [\r\n      \"id\",\r\n      \"name\",\r\n      \"category\",\r\n      \"price\",\r\n      \"cost\",\r\n      \"imageURL\",\r\n      \"actions\"\r\n    ]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.paginator = this.paginator;\r\n\r\n    this.service\r\n      .all()\r\n      .pipe(\r\n        switchMap(() => this.categoriesService.all()),\r\n        tap(categories => {\r\n          console.log(categories);\r\n          this.categories = categories;\r\n        }),\r\n        switchMap(() => this.service.objects),\r\n        takeUntil(this.ngUnsubscribe),\r\n        tap(products => {\r\n          console.log(`${this.service.collectionName} : `, products);\r\n          this.objects = products;\r\n          this.dataSource.data = this.filterByCategory(this.categoryCtrl.value);\r\n        }),\r\n        switchMap(() => this.categoryCtrl.valueChanges),\r\n        takeUntil(this.ngUnsubscribe),\r\n        tap(categoryId => {\r\n          if (categoryId === \"all\") {\r\n            this.displayedColumns = [\r\n              // \"id\",\r\n              \"name\",\r\n              \"category\",\r\n              \"price\",\r\n              \"cost\",\r\n              \"imageURL\",\r\n              \"actions\"\r\n            ];\r\n          } else {\r\n            this.displayedColumns = [\r\n              // \"id\",\r\n              \"name\",\r\n              \"price\",\r\n              \"cost\",\r\n              \"imageURL\",\r\n              \"actions\"\r\n            ];\r\n          }\r\n        })\r\n      )\r\n      .subscribe(\r\n        (categoryId: string) =>\r\n          (this.dataSource.data = this.filterByCategory(categoryId))\r\n      );\r\n  }\r\n\r\n  filterByCategory(id: string) {\r\n    // console.log(id);\r\n    // if (!this.objects) {\r\n    //   return [];\r\n    // }\r\n    if (id === \"all\") {\r\n      return this.objects.slice();\r\n    }\r\n    return this.objects\r\n      .slice()\r\n      .filter(_product => _product.category._id === id);\r\n  }\r\n}\r\n","import { SharedModule } from \"../../shared/shared.module\";\r\nimport { NgModule } from \"@angular/core\";\r\n\r\nimport { ProductsRoutingModule } from \"./products-routing.module\";\r\nimport { ProductsComponent } from \"./products.component\";\r\nimport { CreateComponent } from \"./create/create.component\";\r\nimport { DeleteComponent } from \"./delete/delete.component\";\r\nimport { UpdateComponent } from \"./update/update.component\";\r\nimport { UploadModule } from \"../../upload/upload.module\";\r\n\r\n@NgModule({\r\n  imports: [SharedModule, UploadModule, ProductsRoutingModule],\r\n  declarations: [\r\n    ProductsComponent,\r\n    CreateComponent,\r\n    DeleteComponent,\r\n    UpdateComponent\r\n  ]\r\n})\r\nexport class ProductsModule {}\r\n","module.exports = \"<form #f='ngForm' (ngSubmit)='onSubmit(f)'>\\r\\n  <mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        <h2>Actualizar {{ service.className | lowercase }}</h2>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <ng-container *ngIf='object as product;else loadingObject'>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-12 col-sm-6 col-lg-4 offset-lg-1\\\">\\r\\n            <mat-form-field>\\r\\n              <input matInput type=\\\"text\\\" placeholder='Nombre' [ngModel]='product.name' name='name' required [readonly]='f.submitted'>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field>\\r\\n              <input matInput type=\\\"text\\\" placeholder='Descripción' [ngModel]='product.description' name='description' [readonly]='f.submitted'>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field>\\r\\n              <input matInput type=\\\"number\\\" placeholder='Precio' [ngModel]='product.price' name='price' required [readonly]='f.submitted'>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field>\\r\\n              <input matInput type=\\\"number\\\" placeholder='Costo' [ngModel]='product.cost' name='cost' required [readonly]='f.submitted'>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field *ngIf='categories;else loadingCategories'>\\r\\n              <mat-select placeholder='Categoría' [ngModel]='product.category' name='category' [compareWith]='categoryCompareWith' required\\r\\n                [disabled]='f.submitted'>\\r\\n                <mat-option *ngFor='let category of categories' [value]='category'>{{ category.name }}</mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n            <ng-template #loadingCategories>\\r\\n              <mat-spinner class=\\\"mx-auto col-12\\\"></mat-spinner>\\r\\n            </ng-template>\\r\\n          </div>\\r\\n          <div class=\\\"col-12 col-sm-6 col-lg-6 offset-lg-1 text-center my-2\\\">\\r\\n            <app-upload [fileURL]='product.imageURL | showImage'></app-upload>\\r\\n            <input type=\\\"text\\\" placeholder='Image URL' [ngModel]='product.imageURL' name='imageURL' class='d-none'>\\r\\n          </div>\\r\\n        </div>\\r\\n      </ng-container>\\r\\n      <ng-template #loadingObject>\\r\\n        <mat-spinner class=\\\"mx-auto col-12\\\"></mat-spinner>\\r\\n      </ng-template>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-button type='submit' [disabled]='f.invalid || f.submitted'>Actualizar</button>\\r\\n      <button mat-button type='button' routerLink='../../' [disabled]='f.submitted'>Cancelar</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n</form>\"","module.exports = \"\"","import { CategoriesService } from \"../../categories/categories.service\";\r\nimport { Component, ViewChild, OnInit } from \"@angular/core\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ProductsService } from \"../products.service\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { NotificationsService } from \"../../../notifications/notifications.service\";\r\nimport { Update } from \"../../../shared/helpers/update\";\r\nimport { Category } from \"../../../shared/models/category\";\r\nimport { Product } from \"../../../shared/models/product\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { UploadComponent } from \"../../../upload/upload.component\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\n\r\n@Component({\r\n  selector: \"app-update\",\r\n  templateUrl: \"./update.component.html\",\r\n  styleUrls: [\r\n    \"./update.component.scss\",\r\n    \"../../../shared/styles/crud-update.scss\"\r\n  ]\r\n})\r\nexport class UpdateComponent extends Update<Product> implements OnInit {\r\n  @ViewChild(UploadComponent)\r\n  upload: UploadComponent;\r\n  categories: Category[];\r\n  constructor(\r\n    public service: ProductsService,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute,\r\n    private categoriesService: CategoriesService\r\n  ) {\r\n    super(service, notifications, router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n    this.categoriesService\r\n      .all()\r\n      .pipe(\r\n        // tslint:disable-next-line:arrow-return-shorthand\r\n        map(categories =>\r\n          categories.map(category => {\r\n            return { name: category.name, _id: category._id } as Category;\r\n          })\r\n        )\r\n      )\r\n      .subscribe((categories: Category[]) => (this.categories = categories));\r\n  }\r\n\r\n  categoryCompareWith(a: Category, b: Category): boolean {\r\n    if (a && b) {\r\n      return a._id === b._id;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    this.upload.onSubmit(this.service.apiRoute).subscribe(\r\n      (imageURL: string) => {\r\n        if (imageURL) {\r\n          form.controls.imageURL.setValue(imageURL);\r\n        } else {\r\n          form.controls.imageURL.disable();\r\n        }\r\n        // form.reset(form.value);\r\n        super.onSubmit(form);\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        console.log(error);\r\n        form.reset(form.value);\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}