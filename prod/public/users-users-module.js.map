{"version":3,"sources":["webpack:///./src/app/admin/users/create/create.component.html","webpack:///./src/app/admin/users/create/create.component.scss","webpack:///./src/app/admin/users/create/create.component.ts","webpack:///./src/app/admin/users/delete/delete.component.html","webpack:///./src/app/admin/users/delete/delete.component.scss","webpack:///./src/app/admin/users/delete/delete.component.ts","webpack:///./src/app/admin/users/update/update.component.html","webpack:///./src/app/admin/users/update/update.component.scss","webpack:///./src/app/admin/users/update/update.component.ts","webpack:///./src/app/admin/users/users-routing.module.ts","webpack:///./src/app/admin/users/users.component.html","webpack:///./src/app/admin/users/users.component.scss","webpack:///./src/app/admin/users/users.component.ts","webpack:///./src/app/admin/users/users.module.ts","webpack:///./src/app/admin/users/users.service.ts","webpack:///./src/app/shared/helpers/create.ts","webpack:///./src/app/shared/helpers/delete.ts","webpack:///./src/app/shared/helpers/list.ts","webpack:///./src/app/shared/helpers/update.ts","webpack:///./src/app/shared/styles/crud-create.scss","webpack:///./src/app/shared/styles/crud-delete.scss","webpack:///./src/app/shared/styles/crud-list.scss","webpack:///./src/app/shared/styles/crud-update.scss"],"names":[],"mappings":"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","file":"users-users-module.js","sourcesContent":["module.exports = \"<form #f='ngForm' (ngSubmit)='onSubmit(f)'>\\r\\n  <mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        <h2>Agregar {{ service.className | lowercase }}</h2>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" placeholder='Nombre' [(ngModel)]='user.name' name='name' required [readonly]='f.submitted'>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" placeholder='Usuario' [(ngModel)]='user.username' name='username' required [readonly]='f.submitted'>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"email\\\" placeholder='Correo electrónico' [(ngModel)]='user.email' name='email' required [readonly]='f.submitted'>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <mat-select placeholder='Rol' [(ngModel)]='user.role' name='role' required [disabled]='f.submitted'>\\r\\n          <mat-option *ngFor='let role of roles' [value]='role'>{{ role }}</mat-option>\\r\\n        </mat-select>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" placeholder='Contraseña' [(ngModel)]='user.password' name='password' required [readonly]='f.submitted'>\\r\\n      </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-button type='submit' [disabled]='f.invalid || f.submitted'>Agregar</button>\\r\\n      <button mat-button type='button' routerLink='../' [disabled]='f.submitted'>Cancelar</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n</form>\\r\\n\"","module.exports = \"\"","import { UsersService } from \"../users.service\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { NotificationsService } from \"../../../notifications/notifications.service\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { User } from \"../../../shared/models/user\";\r\nimport { Create } from \"../../../shared/helpers/create\";\r\n\r\n@Component({\r\n  selector: \"app-create\",\r\n  templateUrl: \"./create.component.html\",\r\n  styleUrls: [\r\n    \"./create.component.scss\",\r\n    \"../../../shared/styles/crud-create.scss\"\r\n  ]\r\n})\r\nexport class CreateComponent extends Create<User> {\r\n  user = new User();\r\n  roles = [\"Cliente\", \"Admin\"];\r\n\r\n  constructor(\r\n    public usersService: UsersService,\r\n    public router: Router,\r\n    public route: ActivatedRoute,\r\n    public notifications: NotificationsService\r\n  ) {\r\n    super(usersService, notifications, router, route);\r\n  }\r\n}\r\n","module.exports = \"<mat-card *ngIf='service.className | lowercase as className'>\\r\\n  <mat-card-header>\\r\\n    <mat-card-title>\\r\\n      <h2>Eliminar {{ className }}</h2>\\r\\n    </mat-card-title>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n    <p>¿Seguro que quieres eliminar al {{ className }}\\r\\n      <b>{{ _id }}</b>?\\r\\n    </p>\\r\\n  </mat-card-content>\\r\\n  <mat-card-actions>\\r\\n    <button mat-button type='button' (click)='onSubmit()'>Eliminar</button>\\r\\n    <button mat-button type='button' routerLink='../../'>Cancelar</button>\\r\\n  </mat-card-actions>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { UsersService } from \"../users.service\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { Component } from \"@angular/core\";\r\nimport { NotificationsService } from \"../../../notifications/notifications.service\";\r\nimport { Delete } from \"../../../shared/helpers/delete\";\r\nimport { User } from \"../../../shared/models/user\";\r\n\r\n@Component({\r\n  selector: \"app-delete\",\r\n  templateUrl: \"./delete.component.html\",\r\n  styleUrls: [\r\n    \"./delete.component.scss\",\r\n    \"../../../shared/styles/crud-delete.scss\"\r\n  ]\r\n})\r\nexport class DeleteComponent extends Delete<User> {\r\n  constructor(\r\n    public usersService: UsersService,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super(usersService, notifications, router, route);\r\n  }\r\n}\r\n","module.exports = \"<form #f='ngForm' (ngSubmit)='onSubmit(f)'>\\r\\n  <mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        <h2>Actualizar {{ service.className | lowercase }}</h2>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <ng-container *ngIf='object as user'>\\r\\n        <mat-form-field>\\r\\n          <input matInput type=\\\"text\\\" placeholder='Nombre' [ngModel]='user.name' name='name' required [readonly]='f.submitted'>\\r\\n        </mat-form-field>\\r\\n        <mat-form-field>\\r\\n          <input matInput type=\\\"text\\\" placeholder='Usuario' [ngModel]='user.username' name='username' required [readonly]='f.submitted'>\\r\\n        </mat-form-field>\\r\\n        <mat-form-field>\\r\\n          <mat-select placeholder='Rol' [ngModel]='user.role' name='role' required [disabled]='f.submitted'>\\r\\n            <mat-option *ngFor='let role of roles' [value]='role'>{{ role }}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </ng-container>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-button type='submit' [disabled]='f.invalid || f.submitted'>Actualizar</button>\\r\\n      <button mat-button type='button' routerLink='../../' [disabled]='f.submitted'>Cancelar</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n</form>\\r\\n\"","module.exports = \"\"","import { Component } from \"@angular/core\";\r\nimport { User } from \"../../../shared/models/user\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { UsersService } from \"../users.service\";\r\nimport { NotificationsService } from \"../../../notifications/notifications.service\";\r\nimport { Update } from \"../../../shared/helpers/update\";\r\n\r\n@Component({\r\n  selector: \"app-update\",\r\n  templateUrl: \"./update.component.html\",\r\n  styleUrls: [\r\n    \"./update.component.scss\",\r\n    \"../../../shared/styles/crud-update.scss\"\r\n  ]\r\n})\r\nexport class UpdateComponent extends Update<User> {\r\n  roles = [\"Cliente\", \"Admin\"];\r\n  constructor(\r\n    public service: UsersService,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super(service, notifications, router, route);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DeleteComponent } from './delete/delete.component';\r\nimport { UpdateComponent } from './update/update.component';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { UsersComponent } from './users.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: UsersComponent, children: [\r\n      { path: 'agregar', component: CreateComponent },\r\n      { path: 'actualizar', component: UpdateComponent },\r\n      { path: 'actualizar/:_id', component: UpdateComponent },\r\n      { path: 'eliminar', component: DeleteComponent },\r\n      { path: 'eliminar/:_id', component: DeleteComponent },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n","module.exports = \"<div class=\\\"action-container\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n</div>\\r\\n<mat-card>\\r\\n  <mat-card-header>\\r\\n    <mat-card-title>\\r\\n      <h2>{{ service.collectionName }}</h2>\\r\\n    </mat-card-title>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n    <button mat-button type='button' routerLink='agregar'>Agregar {{ service.className | lowercase }}</button>\\r\\n    <div class=\\\"table-container\\\">\\r\\n      <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z0\\\" matSort>\\r\\n        <!-- ID Column -->\\r\\n        <ng-container matColumnDef=\\\"id\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> ID </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element._id}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Created at Column -->\\r\\n        <ng-container matColumnDef=\\\"createdAt\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Fecha de registro </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.createdAt | date}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Name Column -->\\r\\n        <ng-container matColumnDef=\\\"name\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Nombre </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- User name Column -->\\r\\n        <ng-container matColumnDef=\\\"username\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Usuario </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.username}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Email address Column -->\\r\\n        <ng-container matColumnDef=\\\"email\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Correo electrónico </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Role Column -->\\r\\n        <ng-container matColumnDef=\\\"role\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Rol </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.role}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Actions Column -->\\r\\n        <ng-container matColumnDef=\\\"actions\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Acciones </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n            <button mat-button type='button' (click)='onAction(\\\"actualizar\\\",element)'>Actualizar</button>\\r\\n            <button mat-button type='button' (click)='onAction(\\\"eliminar\\\",element)'>Eliminar</button>\\r\\n          </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n      </table>\\r\\n    </div>\\r\\n    <ng-container *ngIf='!objects'>\\r\\n      <mat-spinner class=\\\"mx-auto col-12\\\"></mat-spinner>\\r\\n    </ng-container>\\r\\n    <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\r\\n  </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { List } from '../../shared/helpers/list';\r\nimport { User } from '../../shared/models/user';\r\nimport { UsersService } from './users.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss', '../../shared/styles/crud-list.scss']\r\n})\r\nexport class UsersComponent extends List<User> {\r\n  constructor(\r\n    public service: UsersService,\r\n    public router: Router,\r\n  ) {\r\n    super(\r\n      service,\r\n      router,\r\n      [\"id\", \"createdAt\", \"name\", \"username\", \"email\", \"role\", \"actions\"]\r\n    );\r\n  }\r\n\r\n  onAction(action: string, user: User) {\r\n    let username = \"\";\r\n    if (user) {\r\n      username = user['username'];\r\n      this.service.setSelectedObject(user);\r\n    }\r\n    this.router.navigate([\"admin\", this.service.collectionName.toLowerCase(), action, username]);\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { SharedModule } from \"../../shared/shared.module\";\r\n\r\nimport { UsersRoutingModule } from \"./users-routing.module\";\r\nimport { UsersComponent } from \"./users.component\";\r\nimport { CreateComponent } from \"./create/create.component\";\r\nimport { UpdateComponent } from \"./update/update.component\";\r\nimport { DeleteComponent } from \"./delete/delete.component\";\r\n\r\n@NgModule({\r\n  imports: [SharedModule, UsersRoutingModule],\r\n  declarations: [\r\n    UsersComponent,\r\n    CreateComponent,\r\n    UpdateComponent,\r\n    DeleteComponent\r\n  ]\r\n})\r\nexport class UsersModule {}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { User } from \"../../shared/models/user\";\r\nimport { DAO } from \"../../shared/helpers/dao\";\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class UsersService extends DAO<User> {\r\n  constructor(httpClient: HttpClient) {\r\n    super(httpClient, \"Usuario\", \"Usuarios\", \"usuarios\");\r\n  }\r\n}\r\n","import { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { NotificationsService } from \"../../notifications/notifications.service\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\nimport { DAO } from \"./dao\";\r\nimport { Upload } from \"../../upload/upload\";\r\n\r\nexport class Create<T> {\r\n  constructor(\r\n    public service: DAO<T>,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {}\r\n\r\n  onSubmit(form: NgForm) {\r\n    const product: T = form.value;\r\n    this.service.create(product).subscribe(\r\n      (addedObject: T) => {\r\n        console.log(addedObject);\r\n        this.notifications.show(\r\n          `${this.service.className} agregado (ID: ${addedObject[\"_id\"]}`,\r\n          this.service.collectionName,\r\n          \"success\"\r\n        );\r\n        this.router.navigate([\"../\"], { relativeTo: this.route });\r\n      },\r\n      (e: HttpErrorResponse) => {\r\n        console.log(e.error);\r\n        this.notifications.show(e.error, this.service.collectionName, \"danger\");\r\n        form.resetForm();\r\n      }\r\n    );\r\n  }\r\n}\r\n","import { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { OnInit, OnDestroy } from \"@angular/core\";\r\nimport { map, tap, filter, takeUntil } from \"rxjs/operators\";\r\nimport { NotificationsService } from \"../../notifications/notifications.service\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\nimport { Subject } from \"rxjs\";\r\nimport { DAO } from \"./dao\";\r\n\r\nexport class Delete<T> implements OnInit, OnDestroy {\r\n  private ngUnsubscribe = new Subject();\r\n  _id: string;\r\n  constructor(\r\n    public service: DAO<T>,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap\r\n      .pipe(\r\n        takeUntil(this.ngUnsubscribe),\r\n        map(params => params.get(\"_id\")),\r\n        tap(\r\n          _id =>\r\n            !!_id\r\n              ? false\r\n              : this.router.navigate([\"../\"], { relativeTo: this.route })\r\n        ),\r\n        filter(_id => !!_id)\r\n      )\r\n      .subscribe(_id => (this._id = _id));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.ngUnsubscribe.next();\r\n    this.ngUnsubscribe.complete();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.service.delete(this._id).subscribe(\r\n      () => {\r\n        this.notifications.show(\r\n          `${this.service.className} eliminado`,\r\n          this.service.collectionName,\r\n          \"success\"\r\n        );\r\n      },\r\n      (e: HttpErrorResponse) => {\r\n        this.notifications.show(e.error, this.service.collectionName, \"danger\");\r\n      },\r\n      () => this.router.navigate([\"../../\"], { relativeTo: this.route })\r\n    );\r\n  }\r\n}\r\n","import { OnInit, OnDestroy, ViewChild } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { switchMap, tap, takeUntil } from \"rxjs/operators\";\r\nimport { Subject } from \"rxjs\";\r\nimport { DAO } from \"./dao\";\r\nimport { MatTableDataSource, MatPaginator, MatSort } from \"@angular/material\";\r\n\r\nexport class List<T> implements OnInit, OnDestroy {\r\n  public ngUnsubscribe = new Subject();\r\n  public objects: T[];\r\n  public dataSource: MatTableDataSource<T> = new MatTableDataSource<T>();\r\n\r\n  @ViewChild(MatPaginator)\r\n  paginator: MatPaginator;\r\n  @ViewChild(MatSort)\r\n  sort: MatSort;\r\n\r\n  constructor(\r\n    public service: DAO<T>,\r\n    public router: Router,\r\n    public displayedColumns: string[]\r\n  ) {\r\n    if (true) {\r\n      const indexID = displayedColumns.indexOf(\"id\");\r\n      if (indexID >= 0) displayedColumns.splice(indexID, 1);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.service\r\n      .all()\r\n      .pipe(\r\n        switchMap(() => this.service.objects),\r\n        takeUntil(this.ngUnsubscribe),\r\n        tap(objects => {\r\n          console.log(`${this.service.collectionName} : `, objects);\r\n          this.dataSource.sort = this.sort;\r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.paginator.pageSize = 10;\r\n          this.objects = objects;\r\n        })\r\n      )\r\n      .subscribe((objects: T[]) => (this.dataSource.data = objects));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.ngUnsubscribe.next();\r\n    this.ngUnsubscribe.complete();\r\n  }\r\n\r\n  onAction(action: string, object: T) {\r\n    let _id = \"\";\r\n    if (object) {\r\n      _id = object[\"_id\"];\r\n      this.service.setSelectedObject(object);\r\n    }\r\n    this.router.navigate([\"admin\", this.service.apiRoute, action, _id]);\r\n  }\r\n}\r\n","import { OnInit, OnDestroy } from \"@angular/core\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { map, filter, tap, switchMap, takeUntil } from \"rxjs/operators\";\r\nimport { Subject } from \"rxjs\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { NotificationsService } from \"../../notifications/notifications.service\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\nimport { DAO } from \"./dao\";\r\n\r\nexport class Update<T> implements OnInit, OnDestroy {\r\n  private ngUnsubscribe = new Subject();\r\n  object: T;\r\n  _id: string;\r\n  constructor(\r\n    public service: DAO<T>,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap\r\n      .pipe(\r\n        map(params => params.get(\"_id\")),\r\n        tap(_id => {\r\n          this._id = _id;\r\n          if (_id === null || !(_id as string)) {\r\n            this.router.navigate([\"../\"], { relativeTo: this.route });\r\n          }\r\n        }),\r\n        filter(_id => !!_id),\r\n        switchMap(\r\n          _id =>\r\n            this.service.isObjectSelected()\r\n              ? this.service.getSelectedObject()\r\n              : this.service.one(_id)\r\n        ),\r\n        takeUntil(this.ngUnsubscribe)\r\n        // tap(object => console.log(object))\r\n      )\r\n      .subscribe(object => (this.object = object));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.ngUnsubscribe.next();\r\n    this.ngUnsubscribe.complete();\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    const object: T = form.value;\r\n    this.service.update(this._id, object).subscribe(\r\n      (editedObject: T) => {\r\n        this.notifications.show(\r\n          `${this.service.className} actualizado`,\r\n          this.service.collectionName,\r\n          \"success\"\r\n        );\r\n        this.router.navigate([\"../../\"], { relativeTo: this.route });\r\n      },\r\n      (e: HttpErrorResponse) => {\r\n        this.notifications.show(e.error, this.service.collectionName, \"danger\");\r\n        form.resetForm(object);\r\n      }\r\n    );\r\n  }\r\n}\r\n","module.exports = \".mat-form-field {\\n  width: 100%; }\\n\"","module.exports = \"\"","module.exports = \".table-container {\\n  overflow: auto; }\\n  .table-container table {\\n    width: 100%;\\n    min-width: 700px; }\\n  .mat-cell {\\n  padding: 0 10px; }\\n  .action-container {\\n  margin-bottom: 15px; }\\n\"","module.exports = \".mat-form-field {\\n  width: 100%; }\\n\""],"sourceRoot":""}